package Mongo_Sample.prac;

import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(value = "/")
public class UserController {

	private final Logger LOG = LoggerFactory.getLogger(getClass());

//	private final UserRepository userRepository;

	@Autowired
	private UserDAL userDAL;

//	public UserController(UserRepository userRepository) {
//		this.userRepository = userRepository;
//		System.out.println("Testing");
//	}

	@RequestMapping(value = "", method = RequestMethod.GET)
	public List<User> getAllUsers() {
		LOG.info("Getting all users.");
		return userDAL.getAllUsers();
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.GET)
	public User getUser(@PathVariable String userId) {
		LOG.info("Getting user with ID: {}.", userId);
		return userDAL.getUserById(userId);
	}

	@RequestMapping(value = "", method = RequestMethod.POST)
	public User addNewUsers(@RequestBody User user) {
		LOG.info("Saving user.");
		return userDAL.addNewUser(user);
	}

	@RequestMapping(value = "/settings/{userId}", method = RequestMethod.GET)
	public Object getAllUserSettings(@PathVariable String userId) {
		User user = userDAL.getUserById(userId);
		if (user != null) {
			return user.getUserSettings();
		} else {
			return "User not found.";
		}
	}

	@RequestMapping(value = "/settings/{userId}/{key}", method = RequestMethod.GET)
	public String getUserSetting(@PathVariable String userId, @PathVariable String key) {
		User user = userDAL.getUserById(userId);
		if (user != null) {
			return user.getUserSettings().get(key);
		} else {
			return "User not found.";
		}
	}

	@RequestMapping(value = "/settings/{userId}/{key}/{value}", method = RequestMethod.GET)
	public String addUserSetting(@PathVariable String userId, @PathVariable String key, @PathVariable String value) {
		User user = userDAL.getUserById(userId);
		if (user != null) {
			userDAL.addUserSetting(userId, key, value);
			return "Key added";
		} else {
			return "User not found.";
		}
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.PUT)
	public User updateUser(@PathVariable String userId, @Valid @RequestBody User user) {
		return userDAL.updateUser(user,userId);
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.DELETE)
	public String deleteUser(@PathVariable String userId) {
		User user = userDAL.getUserById(userId);
		if (user != null) {
			return userDAL.deleteUser(user);
		}
		return "User not found";
	}

}

//////////////////////////////////////////////////////////////
//    by using Mongo repository

//@RequestMapping(value = "", method = RequestMethod.GET)
//public List<User> getAllUsers() {
//	LOG.info("Getting all users.");
//	return userRepository.findAll();
//}
//
//@RequestMapping(value = "/{userId}", method = RequestMethod.GET)
//public User getUser(@PathVariable String userId) {
//	LOG.info("Getting user with ID: {}.", userId);
//	return userRepository.findById(userId).get();
//}
//
//@RequestMapping(value = "/create", method = RequestMethod.POST)
//public User addNewUsers(@RequestBody User user) {
//	LOG.info("Saving user.");
//	return userRepository.save(user);
//}
//
//@RequestMapping(value = "/settings/{userId}", method = RequestMethod.GET)
//public Object getAllUserSettings(@PathVariable String userId) {
//	User user = userRepository.findById(userId).get();
//	if (user != null) {
//		return user.getUserSettings();
//	} else {
//		return "User not found.";
//	}
//}
//
//@RequestMapping(value = "/settings/{userId}/{key}", method = RequestMethod.GET)
//public String getUserSetting(@PathVariable String userId, @PathVariable String key) {
//	User user = userRepository.findById(userId).get();
//	if (user != null) {
//		return user.getUserSettings().get(key);
//	} else {
//		return "User not found.";
//	}
//}
//
//@RequestMapping(value = "/settings/{userId}/{key}/{value}", method = RequestMethod.GET)
//public String addUserSetting(@PathVariable String userId, @PathVariable String key, @PathVariable String value) {
//	User user = userRepository.findById(userId).get();
//	if (user != null) {
//		user.getUserSettings().put(key, value);
//		userRepository.save(user);
//		return "Key added";
//	} else {
//		return "User not found.";
//	}
//}
//
//@RequestMapping(value = "/{userId}", method = RequestMethod.PUT)
//public String updateUser(@PathVariable String userId, @Valid @RequestBody User user) {
//	
//	return "user updated successfully";
//}
//
//@RequestMapping(value = "/{userId}", method = RequestMethod.DELETE)
//public String deleteUser(@PathVariable String userId) {
//	User user = userRepository.findById(userId).get();
//	if(user != null) {
//		userRepository.delete(user);
//	}
//	return "User deleted Successfully";
//}
